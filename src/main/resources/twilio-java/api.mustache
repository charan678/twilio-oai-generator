{{>licenseInfo}}
{{>packageName}}

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.twilio.base.Resource;
import com.twilio.converter.Converter;
import com.twilio.converter.DateConverter;
import com.twilio.converter.Promoter;
import com.twilio.exception.ApiConnectionException;

import com.twilio.exception.ApiException;
import com.twilio.exception.RestException;
import com.twilio.http.HttpMethod;
import com.twilio.http.Request;
import com.twilio.http.Response;
import com.twilio.http.TwilioRestClient;
import com.twilio.rest.Domains;

import lombok.ToString;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.time.ZonedDateTime;

{{#imports}}import {{import}};
{{/imports}}


{{^fullJavaUtil}}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
{{/fullJavaUtil}}

import lombok.ToString;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.time.ZonedDateTime;
import java.util.Map;
import java.util.Objects;

{{#resources}}
@JsonIgnoreProperties(ignoreUnknown = true)
@ToString
public class {{resourceName}} extends Resource {
    private static final long serialVersionUID = something;

    {{#hasCreate}}
    public static {{resourceName}}Creator creator({{#resourcePathParams}}final {{{dataType}}} {{{paramName}}}{{^-last}}, {{/-last}}{{/resourcePathParams}}){
        return new {{resourceName}}Creator({{#resourcePathParams}}{{{paramName}}}{{^-last}}, {{/-last}}{{/resourcePathParams}});
    }
    {{/hasCreate}}

    {{#hasFetch}}
    public static {{resourceName}}Fetcher fetcher({{#resourcePathParams}}final {{{dataType}}} {{{paramName}}}{{^-last}}, {{/-last}}{{/resourcePathParams}}){
        return new {{resourceName}}Fetcher({{#resourcePathParams}}{{{paramName}}}{{^-last}}, {{/-last}}{{/resourcePathParams}});
    }
    {{/hasFetch}}

    {{#hasDelete}}
    public static {{resourceName}}Deleter delete({{#resourcePathParams}}final {{{dataType}}} {{{paramName}}}{{^-last}}, {{/-last}}{{/resourcePathParams}}){
        return new {{resourceName}}Deleter({{#resourcePathParams}}{{{paramName}}}{{^-last}}, {{/-last}}{{/resourcePathParams}});
    }
    {{/hasDelete}}

    {{#hasRead}}
    public static {{resourceName}}Reader reader({{#resourcePathParams}}final {{{dataType}}} {{{paramName}}}{{^-last}}, {{/-last}}{{/resourcePathParams}}){
        return new {{resourceName}}Reader({{#resourcePathParams}}{{{paramName}}}{{^-last}}, {{/-last}}{{/resourcePathParams}});
    }
    {{/hasRead}}

    {{#hasUpdate}}
    public static {{resourceName}}Updater update({{#resourcePathParams}}final {{{dataType}}} {{{paramName}}}{{^-last}}, {{/-last}}{{/resourcePathParams}}){
        return new {{resourceName}}Updater({{#resourcePathParams}}{{{paramName}}}{{^-last}}, {{/-last}}{{/resourcePathParams}});
    }
    {{/hasUpdate}}

    /**
    * Converts a JSON String into a {{resourceName}} object using the provided ObjectMapper.
    *
    * @param json Raw JSON String
    * @param objectMapper Jackson ObjectMapper
    * @return {{resourceName}} object represented by the provided JSON
    */
    public static {{resourceName}} fromJson(final String json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, {{resourceName}}.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    /**
    * Converts a JSON InputStream into a {{resourceName}} object using the provided
    * ObjectMapper.
    *
    * @param json Raw JSON InputStream
    * @param objectMapper Jackson ObjectMapper
    * @return {{resourceName}} object represented by the provided JSON
    */
    public static {{resourceName}} fromJson(final InputStream json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, {{resourceName}}.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }
{{#operations}}
{{#vendorExtensions.x-is-fetch-operation}}
{{>responseModel}}
{{/vendorExtensions.x-is-fetch-operation}}
{{/operations}}
{{/resources}}
}
